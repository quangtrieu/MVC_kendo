@using Kendo.Mvc.UI
@using BCS.Web.Models
@using BCS.Commons

@model BCS.Web.Models.BudgetModel


@Html.Hidden("inputMethodDollar", BCSCommonData.INPUT_METHOD_DOLLAR)
@Html.Hidden("budgetLenthTypeMonth", BCSCommonData.BUDGET_TYPE_MONTH)

<style>
    budget-item-container {
        width: 100%;
        overflow-x: auto;
        overflow-y: hidden;
    }
    .edit-budget-by-section .header-name {
        padding-top: 14px !important;
    }
</style>

<div class="form-group clearfix col-xs-12 edit-budget-by-section" style="margin: 0 auto; -moz-border-radius: 2em">
    @if (Model.BudgetTabModelList.Count > 0){
        var budgetTab = Model.BudgetTabModelList.FirstOrDefault();

        // get sales category
        var salesParentCategory = Model.CategorySettingModelList.FirstOrDefault(s => s.ParentCategoryId == 0 && s.CategoryName == BCSCommonData.CATEGORY_DEFAULT_SALES_TEXT);
        var salesChildrenCategory = Model.CategorySettingModelList.Where(s => s.ParentCategoryId == salesParentCategory.CategorySettingId).OrderBy(s => s.SortOrder).ToList<CategorySettingModel>();
        var classShowOrHiddenSalesSection = salesChildrenCategory.Count > 0 ? "" : "hidden";

        // get cogs category
        var cogsParentCategory = Model.CategorySettingModelList.FirstOrDefault(s => s.ParentCategoryId == 0 && s.CategoryName == BCSCommonData.CATEGORY_DEFAULT_COGS_TEXT);
        var cogsChildrenCategory = Model.CategorySettingModelList.Where(s => s.ParentCategoryId == cogsParentCategory.CategorySettingId).OrderBy(s => s.SortOrder).ToList<CategorySettingModel>();
        var classShowOrHiddenCogsSection = cogsChildrenCategory.Count > 0 ? "" : "hidden";

        // get payroll expenses category
        var payrollExpensesParentCategory = Model.CategorySettingModelList.FirstOrDefault(s => s.ParentCategoryId == 0 && s.CategoryName == BCSCommonData.CATEGORY_DEFAULT_PAYROLL_EXPENSES_TEXT);
        var peIsNotTaxChildrenCategory = Model.CategorySettingModelList.Where(s => s.ParentCategoryId == payrollExpensesParentCategory.CategorySettingId && s.IsTaxCost == false).OrderBy(s => s.SortOrder).ToList<CategorySettingModel>();
        var peIsTaxChildrenCategory = Model.CategorySettingModelList.Where(s => s.ParentCategoryId == payrollExpensesParentCategory.CategorySettingId && s.IsTaxCost == true).OrderBy(s => s.SortOrder).ToList<CategorySettingModel>();
        var classShowOrHiddenPayrollExpensesSection = peIsNotTaxChildrenCategory.Count > 0 || peIsTaxChildrenCategory.Count > 0 ? "" : "hidden";

        // get operation category
        var operationParentCategory = Model.CategorySettingModelList.FirstOrDefault(s => s.ParentCategoryId == 0 && s.CategoryName == BCSCommonData.CATEGORY_DEFAULT_OPERATION_EXPENSES_TEXT);
        var operationChildrenCategory = Model.CategorySettingModelList.Where(s => s.ParentCategoryId == operationParentCategory.CategorySettingId).OrderBy(s => s.SortOrder).ToList<CategorySettingModel>();
        var classShowOrHiddenOperationSection = operationChildrenCategory.Count > 0 ? "" : "hidden";

        if (Model.Section == BCSCommonData.CATEGORY_DEFAULT_SALES_TEXT)
        {
            classShowOrHiddenCogsSection = "hidden";
            classShowOrHiddenPayrollExpensesSection = "hidden";
            classShowOrHiddenOperationSection = "hidden";
        }
        else if (Model.Section == BCSCommonData.CATEGORY_DEFAULT_COGS_TEXT)
        {
            classShowOrHiddenSalesSection = "hidden";
            classShowOrHiddenPayrollExpensesSection = "hidden";
            classShowOrHiddenOperationSection = "hidden";
        }
        else if (Model.Section == BCSCommonData.CATEGORY_DEFAULT_PAYROLL_EXPENSES_TEXT)
        {
            classShowOrHiddenSalesSection = "hidden";
            classShowOrHiddenCogsSection = "hidden";
            classShowOrHiddenOperationSection = "hidden";
        }
        else if (Model.Section == BCSCommonData.CATEGORY_DEFAULT_OPERATION_EXPENSES_TEXT)
        {
            classShowOrHiddenSalesSection = "hidden";
            classShowOrHiddenCogsSection = "hidden";
            classShowOrHiddenPayrollExpensesSection = "hidden";
        }

        // data table in tab
        System.Data.DataTable salesTable = budgetTab.SalesDataTable;
        System.Data.DataTable cogsTable = budgetTab.CogsDataTable;
        System.Data.DataTable payrollTable = budgetTab.PayrollDataTable;
        System.Data.DataTable payrollIsTaxTable = budgetTab.PayrollIsTaxDataTable;
        System.Data.DataTable operationTable = budgetTab.OperationDataTable;

        var grandTotalProjectionSalesBySectionSales = budgetTab.SalesTotal.Sum(s => s.ProjectionSales);

        @*Area budget data*@
        <div class="tab-area-by-section" style="padding: 0 !important; font-size: 9pt;" budgetTabId="@budgetTab.BudgetTabId" budget-tab-index="@budgetTab.TabIndex" budget-tab-name="@budgetTab.TabName">
        @{
            string[] colorArray = { "background-color: #347ebd", "background-color: #9fd5f1" };
            var headerCount = budgetTab.HeaderColumnList.Count;
            var tableWidth = "width: " + headerCount * 496 + "px";
            var customColumnHeader = "width: 496px";

            var index = 0;

            // write header
            <div class="col-xs-12 header-area" style="border-bottom: 1px solid #A7A7A7; padding: 0px; display: inline-block">
                <div class="col-xs-2">
                    @Html.Label("Annual sales:", new { @style = "font-weight: bold;" })
                    <br />
                    <input type="text" class="bcs-currency-textbox numerictextbox" style="margin-top: -5px; width: 165px" id="Annual_Sales_@budgetTab.TabIndex" value="@string.Format("{0:C}", budgetTab.AnnualSales)" re-value="@budgetTab.AnnualSales" onchange="onChangeAnnualSales(this);" maxlength="15" />
                </div>
                @* header row*@
                <div class="col-xs-10" style="padding: 0px">
                    <div class="budget-item-container" style="overflow-x: hidden !important;">
                        <div class="budget-item-container" style="overflow-x: hidden !important; height: 46px; @tableWidth">
                            <div class="header-row" style="width: 101%;">
                            @{
                                var headerIndex = 0;
                                var headerName = "HeaderName_" + budgetTab.TabIndex;
                                foreach (string header in budgetTab.HeaderColumnList)
                                {
                                    var customStyle = customColumnHeader + "; " + colorArray[headerIndex % 2];
                                    <div class="text-center header-format budget-item header-name" style="@customStyle" budget-tab-id="@budgetTab.BudgetTabId" budget-tab-index="@budgetTab.TabIndex" header-index="@headerIndex">
                                        <span name="@headerName">@header</span>
                                    </div>
                                    headerIndex++;
                                }
                            }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            // write budget detail item
            <div class="col-xs-12 budget-area" style="overflow-y: auto; height: 585px; padding: 0px; display: inline-block">
                <div class="col-xs-2 category-name-column" style="overflow-x: hidden; white-space: nowrap; padding: 0px !important; border-left: 1px solid #A7A7A7; border-right: 1px solid #A7A7A7;">
                    <div class="col-xs-12 category-item" style="height: 81px !important"><span class="header-format">Target</span></div>

                    <div class="col-xs-12 category-item category-total @classShowOrHiddenSalesSection">
                        <span class="header-format">@salesParentCategory.CategoryName</span>
                    </div>

                    @* write sales category *@
                    <div class="Area_Category_Sales @classShowOrHiddenSalesSection">
                    @{
                        index = 0;
                        foreach (var item in salesChildrenCategory)
                        {
                            var formatRowCategory = (index % 2 == 0) ? "" : "background-color: #F0FCFF";
                            var categoryName = "CategoryName_" + budgetTab.TabIndex;
                            <div class="col-xs-12 category-item category-name-data" style="@formatRowCategory" category-setting-id="@item.CategorySettingId" category-name="@item.CategoryName">
                                <span name="@categoryName">@string.Format("{0}", item.CategoryName.Length <= 20 ? item.CategoryName : item.CategoryName.Substring(0, 20))</span>
                            </div>

                            index++;
                        }
                    }
                    </div>

                    <div class="col-xs-12 category-item category-total @classShowOrHiddenCogsSection">
                        <span class="header-format">@cogsParentCategory.CategoryName</span>
                    </div>

                    @* write cogs category *@
                    <div class="Area_Category_COGS @classShowOrHiddenCogsSection">
                    @{
                        index = 0;
                        foreach (var item in cogsChildrenCategory)
                        {
                            var formatRowCategory = (index % 2 == 0) ? "" : "background-color: #F0FCFF";
                            var categoryName = "CategoryName_" + budgetTab.TabIndex;
                            <div class="col-xs-12 category-item category-name-data" style="@formatRowCategory" category-setting-id="@item.CategorySettingId" category-name="@item.CategoryName">
                                <span name="@categoryName">@string.Format("{0}", item.CategoryName.Length <= 20 ? item.CategoryName : item.CategoryName.Substring(0, 20))</span>
                            </div>

                            index++;
                        }
                    }
                    </div>

                    <div class="col-xs-12 category-item category-total @classShowOrHiddenPayrollExpensesSection">
                        <span class="header-format">@payrollExpensesParentCategory.CategoryName</span>
                    </div>

                    @*write payroll expenses category*@
                    <div class="Area_Category_Payroll_Expenses @classShowOrHiddenPayrollExpensesSection">
                        @{
                            index = 0;
                            foreach (var item in peIsNotTaxChildrenCategory)
                            {
                                var formatRowCategory = item.IsPrimeCost ? "color: red;" : "";
                                formatRowCategory = (index % 2 == 0) ? formatRowCategory : formatRowCategory + "background-color: #F0FCFF";
                                var categoryName = "CategoryName_" + budgetTab.TabIndex;
                                <div class="col-xs-12 category-item category-name-data" style="@formatRowCategory" category-setting-id="@item.CategorySettingId" category-name="@item.CategoryName">
                                    <span name="@categoryName">@string.Format("{0}", item.CategoryName.Length <= 20 ? item.CategoryName : item.CategoryName.Substring(0, 20))</span>
                                </div>

                                index++;
                            }
                        }
                        <div class="col-xs-12 category-item category-total"><span class="header-format">Total</span></div>
                        @{
                            index = 0;
                            foreach (var item in peIsTaxChildrenCategory)
                            {
                                var formatRowCategory = item.IsPrimeCost ? "color: red;" : "";
                                formatRowCategory = (index % 2 == 0) ? formatRowCategory : formatRowCategory + "background-color: #F0FCFF";
                                var categoryName = "CategoryName_" + budgetTab.TabIndex;
                                <div class="col-xs-12 category-item category-name-data" style="@formatRowCategory" category-setting-id="@item.CategorySettingId" category-name="@item.CategoryName">
                                    <span name="@categoryName">@string.Format("{0}", item.CategoryName.Length <= 20 ? item.CategoryName : item.CategoryName.Substring(0, 20))</span>
                                </div>

                                index++;
                            }
                        }
                        <div class="col-xs-12 category-item category-total"><span class="header-format">Total</span></div>
                    </div>

                    <div class="col-xs-12 category-item category-total @classShowOrHiddenOperationSection">
                        <span class="header-format">@operationParentCategory.CategoryName</span>
                    </div>

                    @*write operation category*@
                    <div class="Area_Category_Operation_Expenses @classShowOrHiddenOperationSection">
                    @{
                        index = 0;
                        foreach (var item in operationChildrenCategory)
                        {
                            var formatRowCategory = (index % 2 == 0) ? "" : "background-color: #F0FCFF";
                            var categoryName = "CategoryName_" + budgetTab.TabIndex;
                            <div class="col-xs-12 category-item category-name-data" style="@formatRowCategory" category-setting-id="@item.CategorySettingId" category-name="@item.CategoryName">
                                <span name="@categoryName">@string.Format("{0}", item.CategoryName.Length <= 20 ? item.CategoryName : item.CategoryName.Substring(0, 20))</span>
                            </div>

                            index++;
                        }
                    }
                    </div>
                </div>
                <div class="col-xs-10" style="padding: 0px">
                    <div class="budget-item-container" style="overflow: hidden;">
                    <div class="budget-detail-item clearfix budget-item-container" style="overflow: hidden; @tableWidth">
                    <div style="width: 101%">
                        @* Target row*@
                        <div class="target-row">
                            @for (int i = 0; i < headerCount; i++)
                            {
                                var targetSalesVariance = budgetTab.SalesTotal[i].ProjectionSales - budgetTab.TargetColumnList[i].TargetSales;
                                var targetPercentVariance = budgetTab.TargetColumnList[i].TargetSales == 0 ? 0 : targetSalesVariance * 100 / budgetTab.TargetColumnList[i].TargetSales;

                                <div class="text-center budget-item target-data" style="height: 75px !important; border-left: 1px solid #A7A7A7;" header-index="@i">
                                    <input class="bcs-currency-textbox readonly" readonly="readonly" maxlength="15" onchange="onChangeTargetSales(this);" id="@string.Format("Target_Sales_{0}_{1}", budgetTab.TabIndex, i)" value="@string.Format("{0:C}", budgetTab.TargetColumnList[i].TargetSales)" re-value="@budgetTab.TargetColumnList[i].TargetSales" />
                                    <input class="bcs-percent-textbox readonly" readonly="readonly" maxlength="8" onchange="onChangeTargetPercent(this);" id="@string.Format("Target_Percent_{0}_{1}", budgetTab.TabIndex, i)" value="@string.Format("{0:#0.00}%", budgetTab.TargetColumnList[i].TargetPercent)" re-value="@budgetTab.TargetColumnList[i].TargetPercent" />
                                    <input class="bcs-currency-textbox readonly" readonly="readonly" style="@((targetSalesVariance > 0) ? "color: green" : "color: red")" id="@string.Format("Variance_Target_Sales_{0}_{1}", budgetTab.TabIndex, i)" value="@string.Format("{0:C}", targetSalesVariance)" />
                                    <input class="bcs-percent-textbox readonly" readonly="readonly" style="@((targetPercentVariance > 0) ? "color: green" : "color: red")" id="@string.Format("Variance_Target_Percent_{0}_{1}", budgetTab.TabIndex, i)" value="@string.Format("{0:#0.00}%", targetPercentVariance)" />
                                </div>
                                <div class="text-center header-format budget-item actual-div" style="height: 75px !important">Actual</div>
                                <div class="text-center header-format budget-item variance-div" style="height: 75px !important">Variance</div>
                            }
                        </div>

                        @* total sales row *@
                        <div class="sales-row @classShowOrHiddenSalesSection" section-name="Sales">
                            @for (int i = 0; i < headerCount; i++)
                            {
                                var totalProjectionSalesName = "Total__ProjectionSales_" + budgetTab.TabIndex + "_" + i;
                                var totalProjectionPercentName = "Total__ProjectionPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalActualSalesName = "Total__ActualSales_" + budgetTab.TabIndex + "_" + i;
                                var totalActualPercentName = "Total__ActualPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalVarianceSalesName = "Total__VarianceSales_" + budgetTab.TabIndex + "_" + i;
                                var totalVariancePercentName = "Total__VariancePercent_" + budgetTab.TabIndex + "_" + i;
                                var budgetItem = budgetTab.SalesTotal[i];
                                var newStyleColor = (budgetItem.VarianceSales > 0) ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item total-sales-data" budget-tab-index="@budgetTab.TabIndex" header-index="@i" style="border-left: 1px solid #A7A7A7;">
                                    <input class="bcs-currency-textbox" id="@totalProjectionSalesName" value="@string.Format("{0:C}", budgetItem.ProjectionSales)" re-value="@budgetItem.ProjectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalProjectionPercentName" value="@string.Format("{0:#0.00}%", budgetItem.ProjectionPercent)" re-value="@budgetItem.ProjectionPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item actual-div">
                                    <input class="bcs-currency-textbox" id="@totalActualSalesName" style="@newStyleColor" value="@string.Format("{0:C}", budgetItem.ActualSales)" re-value="@budgetItem.ActualSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalActualPercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", budgetItem.ActualPercent)" re-value="@budgetItem.ActualPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item variance-div">
                                    <input class="bcs-currency-textbox" id="@totalVarianceSalesName" style="@newStyleColor" value="@string.Format("{0:C}", Math.Abs(budgetItem.VarianceSales))" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalVariancePercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", Math.Abs(budgetItem.VariancePercent))" readonly="readonly" />
                                </div>
                            }
                        </div>

                        @*data item row by sales category*@
                        <div class="Area_Category_Sales @classShowOrHiddenSalesSection">
                        @{
                            index = 0;
                            foreach (System.Data.DataRow dataRow in salesTable.Rows)
                            {
                                var formatRow = (index % 2 == 0) ? "" : "background-color: #F0FCFF";
                                headerIndex = 0;

                                <div class="data-row-by-category" category-name="@dataRow["CategoryName"]" parent-category-id="@dataRow["ParentCategoryId"]" parent-category-name="@dataRow["ParentCategoryName"]"
                                        category-setting-id="@dataRow["CategorySettingId"]" budget-item-id="@dataRow["BudgetItemId"]" budget-tab-index="@budgetTab.TabIndex" section-name="">
                                    @foreach (string header in budgetTab.HeaderColumnList)
                                    {
                                        var projectionSalesName = string.Format("ProjectionSales_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var projectionPercentName = string.Format("ProjectionPercent_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var actualSalesName = string.Format("ActualSales_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var actualPercentName = string.Format("ActualPercent_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var varianceSalesName = "VarianceSales_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index;
                                        var variancePercentName = "VariancePercent_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index;
                                        var projectionSales = Convert.ToDecimal(dataRow[header + "_ProjectionSales"]);
                                        var projectionPercent = Convert.ToDecimal(dataRow[header + "_ProjectionPercent"]);
                                        var actualSales = Convert.ToDecimal(dataRow[header + "_ActualSales"]);
                                        var actualPercent = Convert.ToDecimal(dataRow[header + "_ActualPercent"]);
                                        var varianceSales = Convert.ToDecimal(dataRow[header + "_VarianceSales"]);
                                        var variancePercent = Convert.ToDecimal(dataRow[header + "_VariancePercent"]);
                                        var newStyleColor = (varianceSales > 0) ? "color: green" : "color: red";

                                        <div class="text-center budget-item projection-data" style="border-left: 1px solid #A7A7A7;@formatRow" header-index="@headerIndex">
                                            @Html.Hidden("HeaderName", header)
                                            @Html.Hidden("IsPercentage_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index, dataRow[header + "_IsPercentage"])
                                            @if (Convert.ToBoolean(dataRow[header + "_IsPercentage"]))
                                            {
                                                <input class="bcs-currency-textbox readonly" readonly="readonly" maxlength="15" onchange="onChangeProjectionSales(this);" id="@projectionSalesName" value="@string.Format("{0:C}", projectionSales)" re-value="@projectionSales" />
                                                <input class="bcs-percent-textbox numerictextbox" maxlength="8" onchange="onChangeProjectionPercent(this);" id="@projectionPercentName" value="@string.Format("{0:#0.00}%", projectionPercent)" re-value="@projectionPercent" />
                                            }
                                            else
                                            {
                                                <input class="bcs-currency-textbox numerictextbox" maxlength="15" onchange="onChangeProjectionSales(this);" id="@projectionSalesName" value="@string.Format("{0:C}", projectionSales)" re-value="@projectionSales" />
                                                <input class="bcs-percent-textbox readonly" readonly="readonly" maxlength="8" onchange="onChangeProjectionPercent(this);" id="@projectionPercentName" value="@string.Format("{0:#0.00}%", projectionPercent)" re-value="@projectionPercent" />
                                            }
                                        </div>
                                        <div class="text-center budget-item actual-div" style="@formatRow">
                                            <input class="bcs-currency-textbox numerictextbox" maxlength="15" onchange="onChangeActualSales(this);" id="@actualSalesName" value="@string.Format("{0:C}", actualSales)" re-value="@actualSales" />
                                            <input class="bcs-percent-textbox readonly" style="@newStyleColor" readonly="readonly" maxlength="8" id="@actualPercentName" value="@string.Format("{0:#0.00}%", actualPercent)" re-value="@actualPercent" />
                                        </div>
                                        <div class="text-center budget-item variance-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" style="@newStyleColor" id="@varianceSalesName" value="@string.Format("{0:C}", Math.Abs(varianceSales))" readonly="readonly" />
                                            <input class="bcs-percent-textbox" style="@newStyleColor" id="@variancePercentName" value="@string.Format("{0:#0.00}%", Math.Abs(variancePercent))" readonly="readonly" />
                                        </div>

                                        headerIndex++;
                                    }
                                </div>

                                index++;
                            }
                        }
                        </div>

                        <div class="sales-row @classShowOrHiddenCogsSection" section-name="COGS">
                            @for (int i = 0; i < headerCount; i++)
                            {
                                var totalProjectionSalesName = "COGS_Total__ProjectionSales_" + budgetTab.TabIndex + "_" + i;
                                var totalProjectionPercentName = "COGS_Total__ProjectionPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalActualSalesName = "COGS_Total__ActualSales_" + budgetTab.TabIndex + "_" + i;
                                var totalActualPercentName = "COGS_Total__ActualPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalVarianceSalesName = "COGS_Total__VarianceSales_" + budgetTab.TabIndex + "_" + i;
                                var totalVariancePercentName = "COGS_Total__VariancePercent_" + budgetTab.TabIndex + "_" + i;
                                var newStyleColor = (budgetTab.CogsTotal[i].VarianceOtherSales > 0) ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item total-sales-data" budget-tab-index="@budgetTab.TabIndex" header-index="@i" style="border-left: 1px solid #A7A7A7;">
                                    <input class="bcs-currency-textbox" id="@totalProjectionSalesName" value="@string.Format("{0:C}", budgetTab.CogsTotal[i].ProjectionSales)" re-value="@budgetTab.CogsTotal[i].ProjectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalProjectionPercentName" value="@string.Format("{0:#0.00}%", budgetTab.CogsTotal[i].ProjectionPercent)" re-value="@budgetTab.CogsTotal[i].ProjectionPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item actual-div">
                                    <input class="bcs-currency-textbox" id="@totalActualSalesName" style="@newStyleColor" value="@string.Format("{0:C}", budgetTab.CogsTotal[i].ActualSales)" re-value="@budgetTab.CogsTotal[i].ActualSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalActualPercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", budgetTab.CogsTotal[i].ActualPercent)" re-value="@budgetTab.CogsTotal[i].ActualPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item variance-div">
                                    <input class="bcs-currency-textbox" id="@totalVarianceSalesName" style="@newStyleColor" value="@string.Format("{0:C}", Math.Abs(budgetTab.CogsTotal[i].VarianceOtherSales))" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalVariancePercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", Math.Abs(budgetTab.CogsTotal[i].VarianceOtherPercent))" readonly="readonly" />
                                </div>
                            }
                        </div>

                        @*data item row by cogs category*@
                        <div class="Area_Category_COGS @classShowOrHiddenCogsSection">
                            @{
                                index = 0;
                                foreach (System.Data.DataRow dataRow in cogsTable.Rows)
                                {
                                    var formatRow = (index % 2 == 0) ? "" : "background-color: #F0FCFF";
                                    headerIndex = 0;

                                    <div class="data-row-by-category" category-name="@dataRow["CategoryName"]" parent-category-id="@dataRow["ParentCategoryId"]" parent-category-name="@dataRow["ParentCategoryName"]"
                                            category-setting-id="@dataRow["CategorySettingId"]" budget-item-id="@dataRow["BudgetItemId"]" budget-tab-index="@budgetTab.TabIndex" section-name="COGS_">
                                    @foreach (string header in budgetTab.HeaderColumnList)
                                    {
                                        var projectionSalesName = string.Format("COGS_ProjectionSales_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var projectionPercentName = string.Format("COGS_ProjectionPercent_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var actualSalesName = string.Format("COGS_ActualSales_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var actualPercentName = string.Format("COGS_ActualPercent_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var varianceSalesName = "COGS_VarianceSales_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index;
                                        var variancePercentName = "COGS_VariancePercent_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index;
                                        var projectionSales = Convert.ToDecimal(dataRow[header + "_ProjectionSales"]);
                                        var projectionPercent = Convert.ToDecimal(dataRow[header + "_ProjectionPercent"]);
                                        var actualSales = Convert.ToDecimal(dataRow[header + "_ActualSales"]);
                                        var actualPercent = Convert.ToDecimal(dataRow[header + "_ActualPercent"]);
                                        var varianceSales = Convert.ToDecimal(dataRow[header + "_VarianceSales"]);
                                        var variancePercent = Convert.ToDecimal(dataRow[header + "_VariancePercent"]);
                                        var newStyleColor = (varianceSales > 0) ? "color: green" : "color: red";

                                        <div class="text-center budget-item projection-data" style="border-left: 1px solid #A7A7A7;@formatRow" header-index="@headerIndex">
                                            @Html.Hidden("HeaderName", header)
                                            @Html.Hidden("COGS_IsPercentage_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index, dataRow[header + "_IsPercentage"])
                                            @if (Convert.ToBoolean(dataRow[header + "_IsPercentage"]))
                                            {
                                                <input class="bcs-currency-textbox readonly" readonly="readonly" maxlength="15" onchange="onChangeCogsProjectionSales(this);" id="@projectionSalesName" value="@string.Format("{0:C}", projectionSales)" re-value="@projectionSales" />
                                                <input class="bcs-percent-textbox numerictextbox" maxlength="8" onchange="onChangeCogsProjectionPercent(this);" id="@projectionPercentName" value="@string.Format("{0:#0.00}%", projectionPercent)" re-value="@projectionPercent" />
                                            }
                                            else
                                            {
                                                <input class="bcs-currency-textbox numerictextbox" maxlength="15" onchange="onChangeCogsProjectionSales(this);" id="@projectionSalesName" value="@string.Format("{0:C}", projectionSales)" re-value="@projectionSales" />
                                                <input class="bcs-percent-textbox readonly" readonly="readonly" maxlength="8" onchange="onChangeCogsProjectionPercent(this);" id="@projectionPercentName" value="@string.Format("{0:#0.00}%", projectionPercent)" re-value="@projectionPercent" />
                                            }
                                        </div>
                                        <div class="text-center budget-item actual-div" style="@formatRow">
                                            <input class="bcs-currency-textbox numerictextbox" maxlength="15" onchange="onChangeCogsActualSales(this);" id="@actualSalesName" value="@string.Format("{0:C}", actualSales)" re-value="@actualSales" />
                                            <input class="bcs-percent-textbox readonly" style="@newStyleColor" readonly="readonly" maxlength="8" id="@actualPercentName" value="@string.Format("{0:#0.00}%", actualPercent)" re-value="@actualPercent" />
                                        </div>
                                        <div class="text-center budget-item variance-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" style="@newStyleColor" id="@varianceSalesName" value="@string.Format("{0:C}", Math.Abs(Convert.ToDecimal(dataRow[header + "_VarianceSales"])))" readonly="readonly" />
                                            <input class="bcs-percent-textbox" style="@newStyleColor" id="@variancePercentName" value="@string.Format("{0:#0.00}%", Math.Abs(Convert.ToDecimal(dataRow[header + "_VariancePercent"])))" readonly="readonly" />
                                        </div>

                                        headerIndex++;
                                    }
                                    </div>

                                    index++;
                                }
                            }
                        </div>

                        <div class="sales-row @classShowOrHiddenPayrollExpensesSection" section-name="Payroll_Expenses">
                            @for (int i = 0; i < headerCount; i++)
                            {
                                var totalProjectionSalesName = "All_Payroll_Expenses_Total__ProjectionSales_" + budgetTab.TabIndex + "_" + i;
                                var totalProjectionPercentName = "All_Payroll_Expenses_Total__ProjectionPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalActualSalesName = "All_Payroll_Expenses_Total__ActualSales_" + budgetTab.TabIndex + "_" + i;
                                var totalActualPercentName = "All_Payroll_Expenses_Total__ActualPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalVarianceSalesName = "All_Payroll_Expenses_Total__VarianceSales_" + budgetTab.TabIndex + "_" + i;
                                var totalVariancePercentName = "All_Payroll_Expenses_Total__VariancePercent_" + budgetTab.TabIndex + "_" + i;
                                var newStyleColor = (budgetTab.PayrollAllTotal[i].VarianceOtherSales > 0) ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item total-sales-data" budget-tab-index="@budgetTab.TabIndex" header-index="@i" style="border-left: 1px solid #A7A7A7;">
                                    <input class="bcs-currency-textbox" id="@totalProjectionSalesName" value="@string.Format("{0:C}", budgetTab.PayrollAllTotal[i].ProjectionSales)" re-value="@budgetTab.PayrollAllTotal[i].ProjectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalProjectionPercentName" value="@string.Format("{0:#0.00}%", budgetTab.PayrollAllTotal[i].ProjectionPercent)" re-value="@budgetTab.PayrollAllTotal[i].ProjectionPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item actual-div">
                                    <input class="bcs-currency-textbox" id="@totalActualSalesName" style="@newStyleColor" value="@string.Format("{0:C}", budgetTab.PayrollAllTotal[i].ActualSales)" re-value="@budgetTab.PayrollAllTotal[i].ActualSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalActualPercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", budgetTab.PayrollAllTotal[i].ActualPercent)" re-value="@budgetTab.PayrollAllTotal[i].ActualPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item variance-div">
                                    <input class="bcs-currency-textbox" id="@totalVarianceSalesName" style="@newStyleColor" value="@string.Format("{0:C}", Math.Abs(budgetTab.PayrollAllTotal[i].VarianceOtherSales))" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalVariancePercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", Math.Abs(budgetTab.PayrollAllTotal[i].VarianceOtherPercent))" readonly="readonly" />
                                </div>
                            }
                        </div>

                        @*data item row by payroll expenses category*@
                        <div class="Area_Category_Payroll_Expenses @classShowOrHiddenPayrollExpensesSection">
                            @{
                                index = 0;
                                foreach (System.Data.DataRow dataRow in payrollTable.Rows)
                                {
                                    var formatRow = (index % 2 == 0) ? "" : "background-color: #F0FCFF";
                                    headerIndex = 0;

                                    <div class="data-row-by-category" category-name="@dataRow["CategoryName"]" parent-category-id="@dataRow["ParentCategoryId"]" parent-category-name="@dataRow["ParentCategoryName"]"
                                            category-setting-id="@dataRow["CategorySettingId"]" budget-item-id="@dataRow["BudgetItemId"]" budget-tab-index="@budgetTab.TabIndex" section-name="Payroll_Expenses_">
                                    @foreach (string header in budgetTab.HeaderColumnList)
                                    {
                                        var projectionSalesName = string.Format("Payroll_Expenses_ProjectionSales_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var projectionPercentName = string.Format("Payroll_Expenses_ProjectionPercent_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var actualSalesName = string.Format("Payroll_Expenses_ActualSales_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var actualPercentName = string.Format("Payroll_Expenses_ActualPercent_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var varianceSalesName = "Payroll_Expenses_VarianceSales_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index;
                                        var variancePercentName = "Payroll_Expenses_VariancePercent_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index;
                                        var projectionSales = Convert.ToDecimal(dataRow[header + "_ProjectionSales"]);
                                        var projectionPercent = Convert.ToDecimal(dataRow[header + "_ProjectionPercent"]);
                                        var actualSales = Convert.ToDecimal(dataRow[header + "_ActualSales"]);
                                        var actualPercent = Convert.ToDecimal(dataRow[header + "_ActualPercent"]);
                                        var varianceSales = Convert.ToDecimal(dataRow[header + "_VarianceSales"]);
                                        var variancePercent = Convert.ToDecimal(dataRow[header + "_VariancePercent"]);
                                        var newStyleColor = (varianceSales > 0) ? "color: green" : "color: red";

                                        <div class="text-center budget-item projection-data" style="border-left: 1px solid #A7A7A7;@formatRow" header-index="@headerIndex">
                                            @Html.Hidden("HeaderName", header)
                                            @Html.Hidden("IsPercentage_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index, dataRow[header + "_IsPercentage"])
                                            @if (Convert.ToBoolean(dataRow[header + "_IsPercentage"]))
                                            {
                                                <input class="bcs-currency-textbox readonly" readonly="readonly" maxlength="15" onchange="onChangePayrollProjectionSales(this);" id="@projectionSalesName" value="@string.Format("{0:C}", projectionSales)" re-value="@projectionSales" />
                                                <input class="bcs-percent-textbox numerictextbox" maxlength="8" onchange="onChangePayrollProjectionPercent(this);" id="@projectionPercentName" value="@string.Format("{0:#0.00}%", projectionPercent)" re-value="@projectionPercent" />
                                            }
                                            else
                                            {
                                                <input class="bcs-currency-textbox numerictextbox" maxlength="15" onchange="onChangePayrollProjectionSales(this);" id="@projectionSalesName" value="@string.Format("{0:C}", projectionSales)" re-value="@projectionSales" />
                                                <input class="bcs-percent-textbox readonly" readonly="readonly" maxlength="8" onchange="onChangePayrollProjectionPercent(this);" id="@projectionPercentName" value="@string.Format("{0:#0.00}%", projectionPercent)" re-value="@projectionPercent" />
                                            }
                                        </div>
                                        <div class="text-center budget-item actual-div" style="@formatRow">
                                            <input class="bcs-currency-textbox numerictextbox" maxlength="15" onchange="onChangePayrollActualSales(this);" id="@actualSalesName" value="@string.Format("{0:C}", actualSales)" re-value="@actualSales" />
                                            <input class="bcs-percent-textbox readonly" style="@newStyleColor" readonly="readonly" maxlength="8" id="@actualPercentName" value="@string.Format("{0:#0.00}%", actualPercent)" re-value="@actualPercent" />
                                        </div>
                                        <div class="text-center budget-item variance-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" style="@newStyleColor" id="@varianceSalesName" value="@string.Format("{0:C}", Math.Abs(varianceSales))" readonly="readonly" />
                                            <input class="bcs-percent-textbox" style="@newStyleColor" id="@variancePercentName" value="@string.Format("{0:#0.00}%", Math.Abs(variancePercent))" readonly="readonly" />
                                        </div>

                                        headerIndex++;
                                    }
                                    </div>

                                    index++;
                                }
                            }
                            <div class="sales-row">
                            @for (int i = 0; i < headerCount; i++)
                            {
                                var totalProjectionSalesName = "Payroll_Expenses_Total__ProjectionSales_" + budgetTab.TabIndex + "_" + i;
                                var totalProjectionPercentName = "Payroll_Expenses_Total__ProjectionPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalActualSalesName = "Payroll_Expenses_Total__ActualSales_" + budgetTab.TabIndex + "_" + i;
                                var totalActualPercentName = "Payroll_Expenses_Total__ActualPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalVarianceSalesName = "Payroll_Expenses_Total__VarianceSales_" + budgetTab.TabIndex + "_" + i;
                                var totalVariancePercentName = "Payroll_Expenses_Total__VariancePercent_" + budgetTab.TabIndex + "_" + i;
                                var newStyleColor = (budgetTab.PayrollTotal[i].VarianceOtherSales > 0) ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item" style="border-left: 1px solid #A7A7A7;">
                                    <input class="bcs-currency-textbox" id="@totalProjectionSalesName" value="@string.Format("{0:C}", budgetTab.PayrollTotal[i].ProjectionSales)" re-value="@budgetTab.PayrollTotal[i].ProjectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalProjectionPercentName" value="@string.Format("{0:#0.00}%", budgetTab.PayrollTotal[i].ProjectionPercent)" re-value="@budgetTab.PayrollTotal[i].ProjectionPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item actual-div">
                                    <input class="bcs-currency-textbox" id="@totalActualSalesName" style="@newStyleColor" value="@string.Format("{0:C}", budgetTab.PayrollTotal[i].ActualSales)" re-value="@budgetTab.PayrollTotal[i].ActualSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalActualPercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", budgetTab.PayrollTotal[i].ActualPercent)" re-value="@budgetTab.PayrollTotal[i].ActualPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item variance-div">
                                    <input class="bcs-currency-textbox" id="@totalVarianceSalesName" style="@newStyleColor" value="@string.Format("{0:C}", Math.Abs(budgetTab.PayrollTotal[i].VarianceOtherSales))" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalVariancePercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", Math.Abs(budgetTab.PayrollTotal[i].VarianceOtherPercent))" readonly="readonly" />
                                </div>
                            }
                            </div>
                            @{
                                index = 0;
                                foreach (System.Data.DataRow dataRow in payrollIsTaxTable.Rows)
                                {
                                    var formatRow = (index % 2 == 0) ? "" : "background-color: #F0FCFF";
                                    headerIndex = 0;

                                    <div class="data-row-by-category is-tax-row" category-name="@dataRow["CategoryName"]" parent-category-id="@dataRow["ParentCategoryId"]" parent-category-name="@dataRow["ParentCategoryName"]"
                                            category-setting-id="@dataRow["CategorySettingId"]" budget-item-id="@dataRow["BudgetItemId"]" budget-tab-index="@budgetTab.TabIndex" section-name="IsTax_Payroll_Expenses_">
                                    @foreach (string header in budgetTab.HeaderColumnList)
                                    {
                                        var projectionSalesName = string.Format("IsTax_Payroll_Expenses_ProjectionSales_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var projectionPercentName = string.Format("IsTax_Payroll_Expenses_ProjectionPercent_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var actualSalesName = string.Format("IsTax_Payroll_Expenses_ActualSales_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var actualPercentName = string.Format("IsTax_Payroll_Expenses_ActualPercent_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var varianceSalesName = "IsTax_Payroll_Expenses_VarianceSales_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index;
                                        var variancePercentName = "IsTax_Payroll_Expenses_VariancePercent_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index;
                                        var projectionSales = Convert.ToDecimal(dataRow[header + "_ProjectionSales"]);
                                        var projectionPercent = Convert.ToDecimal(dataRow[header + "_ProjectionPercent"]);
                                        var actualSales = Convert.ToDecimal(dataRow[header + "_ActualSales"]);
                                        var actualPercent = Convert.ToDecimal(dataRow[header + "_ActualPercent"]);
                                        var varianceSales = Convert.ToDecimal(dataRow[header + "_VarianceSales"]);
                                        var variancePercent = Convert.ToDecimal(dataRow[header + "_VariancePercent"]);
                                        var newStyleColor = (varianceSales > 0) ? "color: green" : "color: red";

                                        <div class="text-center budget-item projection-data" style="border-left: 1px solid #A7A7A7;@formatRow" header-index="@headerIndex">
                                            @Html.Hidden("HeaderName", header)
                                            @Html.Hidden("IsPercentage_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index, dataRow[header + "_IsPercentage"])
                                            @if (Convert.ToBoolean(dataRow[header + "_IsPercentage"]))
                                            {
                                                <input class="bcs-currency-textbox readonly" readonly="readonly" maxlength="15" onchange="onChangePayrollIsTaxProjectionSales(this);" id="@projectionSalesName" value="@string.Format("{0:C}", projectionSales)" re-value="@projectionSales" />
                                                <input class="bcs-percent-textbox numerictextbox" maxlength="8" onchange="onChangePayrollIsTaxProjectionPercent(this);" id="@projectionPercentName" value="@string.Format("{0:#0.00}%", projectionPercent)" re-value="@projectionPercent" />
                                            }
                                            else
                                            {
                                                <input class="bcs-currency-textbox numerictextbox" maxlength="15" onchange="onChangePayrollIsTaxProjectionSales(this);" id="@projectionSalesName" value="@string.Format("{0:C}", projectionSales)" re-value="@projectionSales" />
                                                <input class="bcs-percent-textbox readonly" readonly="readonly" maxlength="8" onchange="onChangePayrollIsTaxProjectionPercent(this);" id="@projectionPercentName" value="@string.Format("{0:#0.00}%", projectionPercent)" re-value="@projectionPercent" />
                                            }
                                        </div>
                                        <div class="text-center budget-item actual-div" style="@formatRow">
                                            <input class="bcs-currency-textbox numerictextbox" maxlength="15" onchange="onChangePayrollIsTaxActualSales(this);" id="@actualSalesName" value="@string.Format("{0:C}", actualSales)" re-value="@actualSales" />
                                            <input class="bcs-percent-textbox readonly" style="@newStyleColor" readonly="readonly" maxlength="8" id="@actualPercentName" value="@string.Format("{0:#0.00}%", actualPercent)" re-value="@actualPercent" />
                                        </div>
                                        <div class="text-center budget-item variance-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" style="@newStyleColor" id="@varianceSalesName" value="@string.Format("{0:C}", Math.Abs(varianceSales))" readonly="readonly" />
                                            <input class="bcs-percent-textbox" style="@newStyleColor" id="@variancePercentName" value="@string.Format("{0:#0.00}%", Math.Abs(variancePercent))" readonly="readonly" />
                                        </div>

                                        headerIndex++;
                                    }
                                    </div>

                                    index++;
                                }
                            }
                            <div class="sales-row">
                            @for (int i = 0; i < headerCount; i++)
                            {
                                var totalProjectionSalesName = "IsTax_Payroll_Expenses_Total__ProjectionSales_" + budgetTab.TabIndex + "_" + i;
                                var totalProjectionPercentName = "IsTax_Payroll_Expenses_Total__ProjectionPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalActualSalesName = "IsTax_Payroll_Expenses_Total__ActualSales_" + budgetTab.TabIndex + "_" + i;
                                var totalActualPercentName = "IsTax_Payroll_Expenses_Total__ActualPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalVarianceSalesName = "IsTax_Payroll_Expenses_Total__VarianceSales_" + budgetTab.TabIndex + "_" + i;
                                var totalVariancePercentName = "IsTax_Payroll_Expenses_Total__VariancePercent_" + budgetTab.TabIndex + "_" + i;
                                var newStyleColor = (budgetTab.PayrollIsTaxTotal[i].VarianceOtherSales > 0) ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item" style="border-left: 1px solid #A7A7A7;">
                                    <input class="bcs-currency-textbox" id="@totalProjectionSalesName" value="@string.Format("{0:C}", budgetTab.PayrollIsTaxTotal[i].ProjectionSales)" re-value="@budgetTab.PayrollIsTaxTotal[i].ProjectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalProjectionPercentName" value="@string.Format("{0:#0.00}%", budgetTab.PayrollIsTaxTotal[i].ProjectionPercent)" re-value="@budgetTab.PayrollIsTaxTotal[i].ProjectionPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item actual-div">
                                    <input class="bcs-currency-textbox" id="@totalActualSalesName" style="@newStyleColor" value="@string.Format("{0:C}", budgetTab.PayrollIsTaxTotal[i].ActualSales)" re-value="@budgetTab.PayrollIsTaxTotal[i].ActualSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalActualPercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", budgetTab.PayrollIsTaxTotal[i].ActualPercent)" re-value="@budgetTab.PayrollIsTaxTotal[i].ActualPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item variance-div">
                                    <input class="bcs-currency-textbox" id="@totalVarianceSalesName" style="@newStyleColor" value="@string.Format("{0:C}", Math.Abs(budgetTab.PayrollIsTaxTotal[i].VarianceOtherSales))" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalVariancePercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", Math.Abs(budgetTab.PayrollIsTaxTotal[i].VarianceOtherPercent))" readonly="readonly" />
                                </div>
                            }
                            </div>
                        </div>

                        <div class="sales-row @classShowOrHiddenOperationSection" section-name="Operation_Expenses">
                            @for (int i = 0; i < headerCount; i++)
                            {
                                var totalProjectionSalesName = "Operation_Expenses_Total__ProjectionSales_" + budgetTab.TabIndex + "_" + i;
                                var totalProjectionPercentName = "Operation_Expenses_Total__ProjectionPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalActualSalesName = "Operation_Expenses_Total__ActualSales_" + budgetTab.TabIndex + "_" + i;
                                var totalActualPercentName = "Operation_Expenses_Total__ActualPercent_" + budgetTab.TabIndex + "_" + i;
                                var totalVarianceSalesName = "Operation_Expenses_Total__VarianceSales_" + budgetTab.TabIndex + "_" + i;
                                var totalVariancePercentName = "Operation_Expenses_Total__VariancePercent_" + budgetTab.TabIndex + "_" + i;
                                var newStyleColor = (budgetTab.OperationTotal[i].VarianceOtherSales > 0) ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item total-sales-data" budget-tab-index="@budgetTab.TabIndex" header-index="@i" style="border-left: 1px solid #A7A7A7;">
                                    <input class="bcs-currency-textbox" id="@totalProjectionSalesName" value="@string.Format("{0:C}", budgetTab.OperationTotal[i].ProjectionSales)" re-value="@budgetTab.OperationTotal[i].ProjectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalProjectionPercentName" value="@string.Format("{0:#0.00}%", budgetTab.OperationTotal[i].ProjectionPercent)" re-value="@budgetTab.OperationTotal[i].ProjectionPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item actual-div">
                                    <input class="bcs-currency-textbox" id="@totalActualSalesName" style="@newStyleColor" value="@string.Format("{0:C}", budgetTab.OperationTotal[i].ActualSales)" re-value="@budgetTab.OperationTotal[i].ActualSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalActualPercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", budgetTab.OperationTotal[i].ActualPercent)" re-value="@budgetTab.OperationTotal[i].ActualPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item variance-div">
                                    <input class="bcs-currency-textbox" id="@totalVarianceSalesName" style="@newStyleColor" value="@string.Format("{0:C}", Math.Abs(budgetTab.OperationTotal[i].VarianceOtherSales))" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@totalVariancePercentName" style="@newStyleColor" value="@string.Format("{0:#0.00}%", Math.Abs(budgetTab.OperationTotal[i].VarianceOtherPercent))" readonly="readonly" />
                                </div>
                            }
                        </div>

                        @*data item row by operation category*@
                        <div class="Area_Category_Operation_Expenses @classShowOrHiddenOperationSection">
                            @{
                                index = 0;
                                foreach (System.Data.DataRow dataRow in operationTable.Rows)
                                {
                                    var formatRow = (index % 2 == 0) ? "" : "background-color: #F0FCFF";
                                    headerIndex = 0;

                                    <div class="data-row-by-category" category-name="@dataRow["CategoryName"]" parent-category-id="@dataRow["ParentCategoryId"]" parent-category-name="@dataRow["ParentCategoryName"]"
                                            category-setting-id="@dataRow["CategorySettingId"]" budget-item-id="@dataRow["BudgetItemId"]" budget-tab-index="@budgetTab.TabIndex" section-name="Operation_Expenses_">
                                    @foreach (string header in budgetTab.HeaderColumnList)
                                    {
                                        var projectionSalesName = string.Format("Operation_Expenses_ProjectionSales_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var projectionPercentName = string.Format("Operation_Expenses_ProjectionPercent_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var actualSalesName = string.Format("Operation_Expenses_ActualSales_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var actualPercentName = string.Format("Operation_Expenses_ActualPercent_{0}_{1}_{2}", budgetTab.TabIndex, headerIndex, index);
                                        var varianceSalesName = "Operation_Expenses_VarianceSales_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index;
                                        var variancePercentName = "Operation_Expenses_VariancePercent_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index;
                                        var projectionSales = Convert.ToDecimal(dataRow[header + "_ProjectionSales"]);
                                        var projectionPercent = Convert.ToDecimal(dataRow[header + "_ProjectionPercent"]);
                                        var actualSales = Convert.ToDecimal(dataRow[header + "_ActualSales"]);
                                        var actualPercent = Convert.ToDecimal(dataRow[header + "_ActualPercent"]);
                                        var varianceSales = Convert.ToDecimal(dataRow[header + "_VarianceSales"]);
                                        var variancePercent = Convert.ToDecimal(dataRow[header + "_VariancePercent"]);
                                        var newStyleColor = (varianceSales > 0) ? "color: green" : "color: red";

                                        <div class="text-center budget-item projection-data" style="border-left: 1px solid #A7A7A7;@formatRow" header-index="@headerIndex">
                                            @Html.Hidden("HeaderName", header)
                                            @Html.Hidden("Operation_Expenses_IsPercentage_" + budgetTab.TabIndex + "_" + headerIndex + "_" + index, dataRow[header + "_IsPercentage"])
                                            @if (Convert.ToBoolean(dataRow[header + "_IsPercentage"]))
                                            {
                                                <input class="bcs-currency-textbox readonly" readonly="readonly" maxlength="15" onchange="onChangeOperationProjectionSales(this);" id="@projectionSalesName" value="@string.Format("{0:C}", projectionSales)" re-value="@projectionSales" />
                                                <input class="bcs-percent-textbox numerictextbox" maxlength="8" onchange="onChangeOperationProjectionPercent(this);" id="@projectionPercentName" value="@string.Format("{0:#0.00}%", projectionPercent)" re-value="@projectionPercent" />
                                            }
                                            else
                                            {
                                                <input class="bcs-currency-textbox numerictextbox" maxlength="15" onchange="onChangeOperationProjectionSales(this);" id="@projectionSalesName" value="@string.Format("{0:C}", projectionSales)" re-value="@projectionSales" />
                                                <input class="bcs-percent-textbox readonly" readonly="readonly" maxlength="8" onchange="onChangeOperationProjectionPercent(this);" id="@projectionPercentName" value="@string.Format("{0:#0.00}%", projectionPercent)" re-value="@projectionPercent" />
                                            }
                                        </div>
                                        <div class="text-center budget-item actual-div" style="@formatRow">
                                            <input class="bcs-currency-textbox numerictextbox" maxlength="15" onchange="onChangeOperationActualSales(this);" id="@actualSalesName" value="@string.Format("{0:C}", actualSales)" re-value="@actualSales" />
                                            <input class="bcs-percent-textbox readonly" style="@newStyleColor" readonly="readonly" maxlength="8" id="@actualPercentName" value="@string.Format("{0:#0.00}%", actualPercent)" re-value="@actualPercent" />
                                        </div>
                                        <div class="text-center budget-item variance-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" style="@newStyleColor" id="@varianceSalesName" value="@string.Format("{0:C}", Math.Abs(Convert.ToDecimal(dataRow[header + "_VarianceSales"])))" readonly="readonly" />
                                            <input class="bcs-percent-textbox" style="@newStyleColor" id="@variancePercentName" value="@string.Format("{0:#0.00}%", Math.Abs(Convert.ToDecimal(dataRow[header + "_VariancePercent"])))" readonly="readonly" />
                                        </div>

                                        headerIndex++;
                                    }
                                    </div>

                                    index++;
                                }
                            }
                        </div>
                    </div>
                    </div>
                    </div>
                </div>
                <div class="col-xs-3 grand-total-panel hidden" style="overflow-x: hidden; padding: 0 !important; border-left: 1px solid #A7A7A7; border-right: 1px solid #A7A7A7;">
                    <div class="budget-detail-item" style="@customColumnHeader">
                        @* grand total header*@
                        <div class="grand-total-header">
                            <div class="text-center header-format budget-item" style="height: 75px !important">Grand Total</div>
                            <div class="text-center header-format budget-item actual-div" style="height: 75px !important">Total Actual</div>
                            <div class="text-center header-format budget-item variance-div" style="height: 75px !important">Total Variance</div>
                        </div>

                        @* grand total Sales*@
                        <div class="grand-total-sales @classShowOrHiddenSalesSection">
                            @{
                                var grandTotalProjectionSalesName = "GrandTotal__ProjectionSales_" + budgetTab.TabIndex;
                                var grandTotalProjectionPercentName = "GrandTotal__ProjectionPercent_" + budgetTab.TabIndex;
                                var grandTotalActualSalesName = "GrandTotal__ActualSales_" + budgetTab.TabIndex;
                                var grandTotalActualPercentName = "GrandTotal__ActualPercent_" + budgetTab.TabIndex;
                                var grandTotalVarianceSalesName = "GrandTotal__VarianceSales_" + budgetTab.TabIndex;
                                var grandTotalVariancePercentName = "GrandTotal__VariancePercent_" + budgetTab.TabIndex;

                                decimal grandTotalProjectionPercent = grandTotalProjectionSalesBySectionSales > 0 ? 100 : 0;
                                var grandTotalActualSales = budgetTab.SalesTotal.Sum(s => s.ActualSales);
                                var grandTotalActualPercent = (grandTotalProjectionSalesBySectionSales == 0) ? 0 : grandTotalActualSales * 100 / grandTotalProjectionSalesBySectionSales;
                                var grandTotalVarianceSales = grandTotalActualSales - grandTotalProjectionSalesBySectionSales;
                                var grandTotalVariancePercent = (grandTotalProjectionSalesBySectionSales == 0) ? 0 : grandTotalVarianceSales * 100 / grandTotalProjectionSalesBySectionSales;
                                var newStyle = grandTotalVarianceSales > 0 ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item">
                                    <input class="bcs-currency-textbox" id="@grandTotalProjectionSalesName" value="@string.Format("{0:C}", grandTotalProjectionSalesBySectionSales)" re-value="@grandTotalProjectionSalesBySectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalProjectionPercentName" value="@string.Format("{0:#0.00}%", grandTotalProjectionPercent)" re-value="@grandTotalProjectionPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item actual-div">
                                    <input class="bcs-currency-textbox" id="@grandTotalActualSalesName" value="@string.Format("{0:C}", grandTotalActualSales)" re-value="@grandTotalActualSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalActualPercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", grandTotalActualPercent)" re-value="@grandTotalActualPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item variance-div">
                                    <input class="bcs-currency-textbox" id="@grandTotalVarianceSalesName" style="@newStyle" value="@string.Format("{0:C}", Math.Abs(grandTotalVarianceSales))" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalVariancePercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", Math.Abs(grandTotalVariancePercent))" readonly="readonly" />
                                </div>
                            }
                        </div>

                        @* grand total by sales category *@
                        <div class="Area_Category_Sales @classShowOrHiddenSalesSection">
                            @{
                                index = 0;
                                foreach (System.Data.DataRow dataRow in salesTable.Rows)
                                {
                                    // grand total row: data row by category id
                                    var formatRow = (index % 2 == 0) ? "" : "background-color: #F0FCFF";

                                    var grandTotalRowProjectionSalesName = "GrandTotalRow_ProjectionSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowProjectionPercentName = "GrandTotalRow_ProjectionPercent_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowActualSalesName = "GrandTotalRow_ActualSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowActualPercentName = "GrandTotalRow_ActualPercent_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowVarianceSalesName = "GrandTotalRow_VarianceSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowVariancePercentName = "GrandTotalRow_VariancePercent_" + budgetTab.TabIndex + "_" + index;

                                    var totalProjectionSales = Convert.ToDecimal(dataRow["GrandTotal_ProjectionSales"]);
                                    var totalProjectionPercent = (grandTotalProjectionSalesBySectionSales == 0) ? 0 : totalProjectionSales * 100 / grandTotalProjectionSalesBySectionSales;
                                    var totalActualSales = Convert.ToDecimal(dataRow["GrandTotal_ActualSales"]);
                                    var totalActualPercent = Convert.ToDecimal(dataRow["GrandTotal_ActualPercent"]);
                                    var totalVarianceSales = Convert.ToDecimal(dataRow["GrandTotal_VarianceSales"]);
                                    var totalVariancePercent = Convert.ToDecimal(dataRow["GrandTotal_VariancePercent"]);
                                    newStyle = (totalVarianceSales > 0) ? "color: green" : "color: red";

                                    <div class="grand-total-category-by-row">
                                        <div class="text-center budget-item" style="@formatRow">
                                            <input class="bcs-currency-textbox" category-setting-id="@dataRow["CategorySettingId"]" category-name="@dataRow["CategoryName"]" id="@grandTotalRowProjectionSalesName" value="@string.Format("{0:C}", totalProjectionSales)" re-value="@totalProjectionSales" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowProjectionPercentName" value="@string.Format("{0:#0.00}%", totalProjectionPercent)" re-value="@totalProjectionPercent" readonly="readonly" />
                                        </div>
                                        <div class="text-center budget-item actual-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" id="@grandTotalRowActualSalesName" value="@string.Format("{0:C}", totalActualSales)" re-value="@totalActualSales" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowActualPercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", totalActualPercent)" re-value="@totalActualPercent" readonly="readonly" />
                                        </div>
                                        <div class="text-center budget-item variance-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" id="@grandTotalRowVarianceSalesName" style="@newStyle" value="@string.Format("{0:C}", Math.Abs(totalVarianceSales))" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowVariancePercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", Math.Abs(totalVariancePercent))" readonly="readonly" />
                                        </div>
                                    </div>

                                    index++;
                                }
                            }
                        </div>

                        @* grand total COGS*@
                        <div class="grand-total-sales @classShowOrHiddenCogsSection">
                            @{
                                grandTotalProjectionSalesName = "COGS_GrandTotal__ProjectionSales_" + budgetTab.TabIndex;
                                grandTotalProjectionPercentName = "COGS_GrandTotal__ProjectionPercent_" + budgetTab.TabIndex;
                                grandTotalActualSalesName = "COGS_GrandTotal__ActualSales_" + budgetTab.TabIndex;
                                grandTotalActualPercentName = "COGS_GrandTotal__ActualPercent_" + budgetTab.TabIndex;
                                grandTotalVarianceSalesName = "COGS_GrandTotal__VarianceSales_" + budgetTab.TabIndex;
                                grandTotalVariancePercentName = "COGS_GrandTotal__VariancePercent_" + budgetTab.TabIndex;

                                var grandTotalProjectionSales = budgetTab.CogsTotal.Sum(s => s.ProjectionSales);
                                grandTotalProjectionPercent = grandTotalProjectionSalesBySectionSales == 0 ? 0 : (grandTotalProjectionSales * 100 / grandTotalProjectionSalesBySectionSales);
                                grandTotalActualSales = budgetTab.CogsTotal.Sum(s => s.ActualSales);
                                grandTotalActualPercent = grandTotalProjectionSales == 0 ? 0 : (grandTotalActualSales * 100 / grandTotalProjectionSales);
                                grandTotalVarianceSales = grandTotalProjectionSales - grandTotalActualSales;
                                grandTotalVariancePercent = grandTotalProjectionSales == 0 ? 0 : (grandTotalVarianceSales * 100 / grandTotalProjectionSales);
                                newStyle = (grandTotalVarianceSales > 0) ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item">
                                    <input class="bcs-currency-textbox" id="@grandTotalProjectionSalesName" value="@string.Format("{0:C}", grandTotalProjectionSales)" re-value="@grandTotalProjectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalProjectionPercentName" value="@string.Format("{0:#0.00}%", grandTotalProjectionPercent)" re-value="@grandTotalProjectionPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item actual-div">
                                    <input class="bcs-currency-textbox" id="@grandTotalActualSalesName" value="@string.Format("{0:C}", grandTotalActualSales)" re-value="@grandTotalActualSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalActualPercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", grandTotalActualPercent)" re-value="@grandTotalActualPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item variance-div">
                                    <input class="bcs-currency-textbox" id="@grandTotalVarianceSalesName" style="@newStyle" value="@string.Format("{0:C}", Math.Abs(grandTotalVarianceSales))" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalVariancePercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", Math.Abs(grandTotalVariancePercent))" readonly="readonly" />
                                </div>
                            }
                        </div>

                        @* grand total by cogs category *@
                        <div class="Area_Category_COGS @classShowOrHiddenCogsSection">
                            @{
                                index = 0;
                                foreach (System.Data.DataRow dataRow in cogsTable.Rows)
                                {
                                    // grand total row: data row by category id
                                    var formatRow = (index % 2 == 0) ? "" : "background-color: #F0FCFF";

                                    var grandTotalRowProjectionSalesName = "COGS_GrandTotalRow_ProjectionSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowProjectionPercentName = "COGS_GrandTotalRow_ProjectionPercent_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowActualSalesName = "COGS_GrandTotalRow_ActualSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowActualPercentName = "COGS_GrandTotalRow_ActualPercent_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowVarianceSalesName = "COGS_GrandTotalRow_VarianceSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowVariancePercentName = "COGS_GrandTotalRow_VariancePercent_" + budgetTab.TabIndex + "_" + index;

                                    var totalProjectionSales = Convert.ToDecimal(dataRow["GrandTotal_ProjectionSales"]);
                                    var totalProjectionPercent = Convert.ToDecimal(dataRow["GrandTotal_ProjectionPercent"]);
                                    var totalActualSales = Convert.ToDecimal(dataRow["GrandTotal_ActualSales"]);
                                    var totalActualPercent = Convert.ToDecimal(dataRow["GrandTotal_ActualPercent"]);
                                    var totalVarianceSales = Convert.ToDecimal(dataRow["GrandTotal_VarianceSales"]);
                                    var totalVariancePercent = Convert.ToDecimal(dataRow["GrandTotal_VariancePercent"]);
                                    newStyle = (totalVarianceSales > 0) ? "color: green" : "color: red";

                                    <div class="grand-total-category-by-row">
                                        <div class="text-center budget-item" style="@formatRow">
                                            <input class="bcs-currency-textbox" category-setting-id="@dataRow["CategorySettingId"]" category-name="@dataRow["CategoryName"]" id="@grandTotalRowProjectionSalesName" value="@string.Format("{0:C}", totalProjectionSales)" re-value="@totalProjectionSales" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowProjectionPercentName" value="@string.Format("{0:#0.00}%", totalProjectionPercent)" re-value="@totalProjectionPercent" readonly="readonly" />
                                        </div>
                                        <div class="text-center budget-item actual-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" id="@grandTotalRowActualSalesName" value="@string.Format("{0:C}", totalActualSales)" re-value="@totalActualSales" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowActualPercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", totalActualPercent)" re-value="@totalActualPercent" readonly="readonly" />
                                        </div>
                                        <div class="text-center budget-item variance-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" id="@grandTotalRowVarianceSalesName" style="@newStyle" value="@string.Format("{0:C}", Math.Abs(totalVarianceSales))" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowVariancePercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", Math.Abs(totalVariancePercent))" readonly="readonly" />
                                        </div>
                                    </div>

                                    index++;
                                }
                            }
                        </div>

                        @* grand total payroll expenses*@
                        <div class="grand-total-sales @classShowOrHiddenPayrollExpensesSection">
                            @{
                                grandTotalProjectionSalesName = "All_Payroll_Expenses_GrandTotal__ProjectionSales_" + budgetTab.TabIndex;
                                grandTotalProjectionPercentName = "All_Payroll_Expenses_GrandTotal__ProjectionPercent_" + budgetTab.TabIndex;
                                grandTotalActualSalesName = "All_Payroll_Expenses_GrandTotal__ActualSales_" + budgetTab.TabIndex;
                                grandTotalActualPercentName = "All_Payroll_Expenses_GrandTotal__ActualPercent_" + budgetTab.TabIndex;
                                grandTotalVarianceSalesName = "All_Payroll_Expenses_GrandTotal__VarianceSales_" + budgetTab.TabIndex;
                                grandTotalVariancePercentName = "All_Payroll_Expenses_GrandTotal__VariancePercent_" + budgetTab.TabIndex;

                                grandTotalProjectionSales = budgetTab.PayrollAllTotal.Sum(s => s.ProjectionSales);
                                grandTotalProjectionPercent = grandTotalProjectionSalesBySectionSales == 0 ? 0 : (grandTotalProjectionSales * 100 / grandTotalProjectionSalesBySectionSales);
                                grandTotalActualSales = budgetTab.PayrollAllTotal.Sum(s => s.ActualSales);
                                grandTotalActualPercent = grandTotalProjectionSales == 0 ? 0 : (grandTotalActualSales * 100 / grandTotalProjectionSales);
                                grandTotalVarianceSales = grandTotalProjectionSales - grandTotalActualSales;
                                grandTotalVariancePercent = grandTotalProjectionSales == 0 ? 0 : (grandTotalVarianceSales * 100 / grandTotalProjectionSales);
                                newStyle = (grandTotalVarianceSales > 0) ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item">
                                    <input class="bcs-currency-textbox" id="@grandTotalProjectionSalesName" value="@string.Format("{0:C}", grandTotalProjectionSales)" re-value="@grandTotalProjectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalProjectionPercentName" value="@string.Format("{0:#0.00}%", grandTotalProjectionPercent)" re-value="@grandTotalProjectionPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item actual-div">
                                    <input class="bcs-currency-textbox" id="@grandTotalActualSalesName" value="@string.Format("{0:C}", grandTotalActualSales)" re-value="@grandTotalActualSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalActualPercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", grandTotalActualPercent)" re-value="@grandTotalActualPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item variance-div">
                                    <input class="bcs-currency-textbox" id="@grandTotalVarianceSalesName" style="@newStyle" value="@string.Format("{0:C}", Math.Abs(grandTotalVarianceSales))" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalVariancePercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", Math.Abs(grandTotalVariancePercent))" readonly="readonly" />
                                </div>
                            }
                        </div>

                        @* grand total by payroll expenses category *@
                        <div class="Area_Category_Payroll_Expenses @classShowOrHiddenPayrollExpensesSection">
                            @{
                                index = 0;
                                foreach (System.Data.DataRow dataRow in payrollTable.Rows)
                                {
                                    // grand total row: data row by category id
                                    var formatRow = (index % 2 == 0) ? "" : "background-color: #F0FCFF";

                                    var grandTotalRowProjectionSalesName = "Payroll_Expenses_GrandTotalRow_ProjectionSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowProjectionPercentName = "Payroll_Expenses_GrandTotalRow_ProjectionPercent_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowActualSalesName = "Payroll_Expenses_GrandTotalRow_ActualSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowActualPercentName = "Payroll_Expenses_GrandTotalRow_ActualPercent_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowVarianceSalesName = "Payroll_Expenses_GrandTotalRow_VarianceSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowVariancePercentName = "Payroll_Expenses_GrandTotalRow_VariancePercent_" + budgetTab.TabIndex + "_" + index;

                                    var totalProjectionSales = Convert.ToDecimal(dataRow["GrandTotal_ProjectionSales"]);
                                    var totalProjectionPercent = grandTotalProjectionSalesBySectionSales == 0 ? 0 : (totalProjectionSales * 100 / grandTotalProjectionSalesBySectionSales);
                                    var totalActualSales = Convert.ToDecimal(dataRow["GrandTotal_ActualSales"]);
                                    var totalActualPercent = Convert.ToDecimal(dataRow["GrandTotal_ActualPercent"]);
                                    var totalVarianceSales = Convert.ToDecimal(dataRow["GrandTotal_VarianceSales"]);
                                    var totalVariancePercent = Convert.ToDecimal(dataRow["GrandTotal_VariancePercent"]);
                                    newStyle = (totalVarianceSales > 0) ? "color: green" : "color: red";

                                    <div class="grand-total-category-by-row">
                                        <div class="text-center budget-item" style="@formatRow">
                                            <input class="bcs-currency-textbox" category-setting-id="@dataRow["CategorySettingId"]" category-name="@dataRow["CategoryName"]" id="@grandTotalRowProjectionSalesName" value="@string.Format("{0:C}", totalProjectionSales)" re-value="@totalProjectionSales" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowProjectionPercentName" value="@string.Format("{0:#0.00}%", totalProjectionPercent)" re-value="@totalProjectionPercent" readonly="readonly" />
                                        </div>
                                        <div class="text-center budget-item actual-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" id="@grandTotalRowActualSalesName" value="@string.Format("{0:C}", totalActualSales)" re-value="@totalActualSales" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowActualPercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", totalActualPercent)" re-value="@totalActualPercent" readonly="readonly" />
                                        </div>
                                        <div class="text-center budget-item variance-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" id="@grandTotalRowVarianceSalesName" style="@newStyle" value="@string.Format("{0:C}", Math.Abs(totalVarianceSales))" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowVariancePercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", Math.Abs(totalVariancePercent))" readonly="readonly" />
                                        </div>
                                    </div>

                                    index++;
                                }
                            }

                            <div class="grand-total-sales">
                                @{
                                grandTotalProjectionSalesName = "Payroll_Expenses_GrandTotal__ProjectionSales_" + budgetTab.TabIndex;
                                grandTotalProjectionPercentName = "Payroll_Expenses_GrandTotal__ProjectionPercent_" + budgetTab.TabIndex;
                                grandTotalActualSalesName = "Payroll_Expenses_GrandTotal__ActualSales_" + budgetTab.TabIndex;
                                grandTotalActualPercentName = "Payroll_Expenses_GrandTotal__ActualPercent_" + budgetTab.TabIndex;
                                grandTotalVarianceSalesName = "Payroll_Expenses_GrandTotal__VarianceSales_" + budgetTab.TabIndex;
                                grandTotalVariancePercentName = "Payroll_Expenses_GrandTotal__VariancePercent_" + budgetTab.TabIndex;

                                grandTotalProjectionSales = budgetTab.PayrollTotal.Sum(s => s.ProjectionSales);
                                grandTotalProjectionPercent = grandTotalProjectionSalesBySectionSales == 0 ? 0 : (grandTotalProjectionSales * 100 / grandTotalProjectionSalesBySectionSales);
                                grandTotalActualSales = budgetTab.PayrollTotal.Sum(s => s.ActualSales);
                                grandTotalActualPercent = grandTotalProjectionSales == 0 ? 0 : (grandTotalActualSales * 100 / grandTotalProjectionSales);
                                grandTotalVarianceSales = grandTotalProjectionSales - grandTotalActualSales;
                                grandTotalVariancePercent = grandTotalProjectionSales == 0 ? 0 : (grandTotalVarianceSales * 100 / grandTotalProjectionSales);
                                newStyle = (grandTotalVarianceSales > 0) ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item">
                                    <input class="bcs-currency-textbox" id="@grandTotalProjectionSalesName" value="@string.Format("{0:C}", grandTotalProjectionSales)" re-value="@grandTotalProjectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalProjectionPercentName" value="@string.Format("{0:#0.00}%", grandTotalProjectionPercent)" re-value="@grandTotalProjectionPercent" readonly="readonly" />
                                </div>
                                    <div class="text-center header-format budget-item actual-div">
                                        <input class="bcs-currency-textbox" id="@grandTotalActualSalesName" value="@string.Format("{0:C}", grandTotalActualSales)" re-value="@grandTotalActualSales" readonly="readonly" />
                                        <input class="bcs-percent-textbox" id="@grandTotalActualPercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", grandTotalActualPercent)" re-value="@grandTotalActualPercent" readonly="readonly" />
                                    </div>
                                    <div class="text-center header-format budget-item variance-div">
                                        <input class="bcs-currency-textbox" id="@grandTotalVarianceSalesName" style="@newStyle" value="@string.Format("{0:C}", Math.Abs(grandTotalVarianceSales))" readonly="readonly" />
                                        <input class="bcs-percent-textbox" id="@grandTotalVariancePercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", Math.Abs(grandTotalVariancePercent))" readonly="readonly" />
                                    </div>
                                }
                            </div>

                            @{
                                index = 0;
                                foreach (System.Data.DataRow dataRow in payrollIsTaxTable.Rows)
                                {
                                    // grand total row: data row by category id
                                    var formatRow = (index % 2 == 0) ? "" : "background-color: #F0FCFF";

                                    var grandTotalRowProjectionSalesName = "IsTax_Payroll_Expenses_GrandTotalRow_ProjectionSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowProjectionPercentName = "IsTax_Payroll_Expenses_GrandTotalRow_ProjectionPercent_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowActualSalesName = "IsTax_Payroll_Expenses_GrandTotalRow_ActualSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowActualPercentName = "IsTax_Payroll_Expenses_GrandTotalRow_ActualPercent_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowVarianceSalesName = "IsTax_Payroll_Expenses_GrandTotalRow_VarianceSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowVariancePercentName = "IsTax_Payroll_Expenses_GrandTotalRow_VariancePercent_" + budgetTab.TabIndex + "_" + index;

                                    var totalProjectionSales = Convert.ToDecimal(dataRow["GrandTotal_ProjectionSales"]);
                                    var totalProjectionPercent = grandTotalProjectionSalesBySectionSales == 0 ? 0 : (totalProjectionSales * 100 / grandTotalProjectionSalesBySectionSales);
                                    var totalActualSales = Convert.ToDecimal(dataRow["GrandTotal_ActualSales"]);
                                    var totalActualPercent = Convert.ToDecimal(dataRow["GrandTotal_ActualPercent"]);
                                    var totalVarianceSales = Convert.ToDecimal(dataRow["GrandTotal_VarianceSales"]);
                                    var totalVariancePercent = Convert.ToDecimal(dataRow["GrandTotal_VariancePercent"]);
                                    newStyle = (totalVarianceSales > 0) ? "color: green" : "color: red";

                                    <div class="grand-total-category-by-row">
                                        <div class="text-center budget-item" style="@formatRow">
                                            <input class="bcs-currency-textbox" category-setting-id="@dataRow["CategorySettingId"]" category-name="@dataRow["CategoryName"]" id="@grandTotalRowProjectionSalesName" value="@string.Format("{0:C}", totalProjectionSales)" re-value="@totalProjectionSales" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowProjectionPercentName" value="@string.Format("{0:#0.00}%", totalProjectionPercent)" re-value="@totalProjectionPercent" readonly="readonly" />
                                        </div>
                                        <div class="text-center budget-item actual-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" id="@grandTotalRowActualSalesName" value="@string.Format("{0:C}", totalActualSales)" re-value="@totalActualSales" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowActualPercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", totalActualPercent)" re-value="@totalActualPercent" readonly="readonly" />
                                        </div>
                                        <div class="text-center budget-item variance-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" id="@grandTotalRowVarianceSalesName" style="@newStyle" value="@string.Format("{0:C}", Math.Abs(totalVarianceSales))" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowVariancePercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", Math.Abs(totalVariancePercent))" readonly="readonly" />
                                        </div>
                                    </div>

                                    index++;
                                }
                            }

                            <div class="grand-total-sales">
                                @{
                                grandTotalProjectionSalesName = "IsTax_Payroll_Expenses_GrandTotal__ProjectionSales_" + budgetTab.TabIndex;
                                grandTotalProjectionPercentName = "IsTax_Payroll_Expenses_GrandTotal__ProjectionPercent_" + budgetTab.TabIndex;
                                grandTotalActualSalesName = "IsTax_Payroll_Expenses_GrandTotal__ActualSales_" + budgetTab.TabIndex;
                                grandTotalActualPercentName = "IsTax_Payroll_Expenses_GrandTotal__ActualPercent_" + budgetTab.TabIndex;
                                grandTotalVarianceSalesName = "IsTax_Payroll_Expenses_GrandTotal__VarianceSales_" + budgetTab.TabIndex;
                                grandTotalVariancePercentName = "IsTax_Payroll_Expenses_GrandTotal__VariancePercent_" + budgetTab.TabIndex;

                                grandTotalProjectionSales = budgetTab.PayrollIsTaxTotal.Sum(s => s.ProjectionSales);
                                grandTotalProjectionPercent = grandTotalProjectionSalesBySectionSales == 0 ? 0 : (grandTotalProjectionSales * 100 / grandTotalProjectionSalesBySectionSales);
                                grandTotalActualSales = budgetTab.PayrollIsTaxTotal.Sum(s => s.ActualSales);
                                grandTotalActualPercent = grandTotalProjectionSales == 0 ? 0 : (grandTotalActualSales * 100 / grandTotalProjectionSales);
                                grandTotalVarianceSales = grandTotalProjectionSales - grandTotalActualSales;
                                grandTotalVariancePercent = grandTotalProjectionSales == 0 ? 0 : (grandTotalVarianceSales * 100 / grandTotalProjectionSales);
                                newStyle = (grandTotalVarianceSales > 0) ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item">
                                    <input class="bcs-currency-textbox" id="@grandTotalProjectionSalesName" value="@string.Format("{0:C}", grandTotalProjectionSales)" re-value="@grandTotalProjectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalProjectionPercentName" value="@string.Format("{0:#0.00}%", grandTotalProjectionPercent)" re-value="@grandTotalProjectionPercent" readonly="readonly" />
                                </div>
                                    <div class="text-center header-format budget-item actual-div">
                                        <input class="bcs-currency-textbox" id="@grandTotalActualSalesName" value="@string.Format("{0:C}", grandTotalActualSales)" re-value="@grandTotalActualSales" readonly="readonly" />
                                        <input class="bcs-percent-textbox" id="@grandTotalActualPercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", grandTotalActualPercent)" re-value="@grandTotalActualPercent" readonly="readonly" />
                                    </div>
                                    <div class="text-center header-format budget-item variance-div">
                                        <input class="bcs-currency-textbox" id="@grandTotalVarianceSalesName" style="@newStyle" value="@string.Format("{0:C}", Math.Abs(grandTotalVarianceSales))" readonly="readonly" />
                                        <input class="bcs-percent-textbox" id="@grandTotalVariancePercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", Math.Abs(grandTotalVariancePercent))" readonly="readonly" />
                                    </div>
                                }
                            </div>
                        </div>

                        @* grand total Operation*@
                        <div class="grand-total-sales @classShowOrHiddenOperationSection">
                            @{
                                grandTotalProjectionSalesName = "Operation_Expenses_GrandTotal__ProjectionSales_" + budgetTab.TabIndex;
                                grandTotalProjectionPercentName = "Operation_Expenses_GrandTotal__ProjectionPercent_" + budgetTab.TabIndex;
                                grandTotalActualSalesName = "Operation_Expenses_GrandTotal__ActualSales_" + budgetTab.TabIndex;
                                grandTotalActualPercentName = "Operation_Expenses_GrandTotal__ActualPercent_" + budgetTab.TabIndex;
                                grandTotalVarianceSalesName = "Operation_Expenses_GrandTotal__VarianceSales_" + budgetTab.TabIndex;
                                grandTotalVariancePercentName = "Operation_Expenses_GrandTotal__VariancePercent_" + budgetTab.TabIndex;

                                grandTotalProjectionSales = budgetTab.OperationTotal.Sum(s => s.ProjectionSales);
                                grandTotalProjectionPercent = grandTotalProjectionSalesBySectionSales == 0 ? 0 : (grandTotalProjectionSales * 100 / grandTotalProjectionSalesBySectionSales);
                                grandTotalActualSales = budgetTab.OperationTotal.Sum(s => s.ActualSales);
                                grandTotalActualPercent = grandTotalProjectionSales == 0 ? 0 : (grandTotalActualSales * 100 / grandTotalProjectionSales);
                                grandTotalVarianceSales = grandTotalProjectionSales - grandTotalActualSales;
                                grandTotalVariancePercent = grandTotalProjectionSales == 0 ? 0 : (grandTotalVarianceSales * 100 / grandTotalProjectionSales);
                                newStyle = (grandTotalVarianceSales > 0) ? "color: green" : "color: red";

                                <div class="text-center header-format budget-item">
                                    <input class="bcs-currency-textbox" id="@grandTotalProjectionSalesName" value="@string.Format("{0:C}", grandTotalProjectionSales)" re-value="@grandTotalProjectionSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalProjectionPercentName" value="@string.Format("{0:#0.00}%", grandTotalProjectionPercent)" re-value="@grandTotalProjectionPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item actual-div">
                                    <input class="bcs-currency-textbox" id="@grandTotalActualSalesName" value="@string.Format("{0:C}", grandTotalActualSales)" re-value="@grandTotalActualSales" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalActualPercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", grandTotalActualPercent)" re-value="@grandTotalActualPercent" readonly="readonly" />
                                </div>
                                <div class="text-center header-format budget-item variance-div">
                                    <input class="bcs-currency-textbox" id="@grandTotalVarianceSalesName" style="@newStyle" value="@string.Format("{0:C}", Math.Abs(grandTotalVarianceSales))" readonly="readonly" />
                                    <input class="bcs-percent-textbox" id="@grandTotalVariancePercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", Math.Abs(grandTotalVariancePercent))" readonly="readonly" />
                                </div>
                            }
                        </div>

                        @* grand total by operation category *@
                        <div class="Area_Category_Operation_Expenses @classShowOrHiddenOperationSection">
                            @{
                                index = 0;
                                foreach (System.Data.DataRow dataRow in operationTable.Rows)
                                {
                                    // grand total row: data row by category id
                                    var formatRow = (index % 2 == 0) ? "" : "background-color: #F0FCFF";

                                    var grandTotalRowProjectionSalesName = "Operation_Expenses_GrandTotalRow_ProjectionSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowProjectionPercentName = "Operation_Expenses_GrandTotalRow_ProjectionPercent_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowActualSalesName = "Operation_Expenses_GrandTotalRow_ActualSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowActualPercentName = "Operation_Expenses_GrandTotalRow_ActualPercent_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowVarianceSalesName = "Operation_Expenses_GrandTotalRow_VarianceSales_" + budgetTab.TabIndex + "_" + index;
                                    var grandTotalRowVariancePercentName = "Operation_Expenses_GrandTotalRow_VariancePercent_" + budgetTab.TabIndex + "_" + index;

                                    var totalProjectionSales = Convert.ToDecimal(dataRow["GrandTotal_ProjectionSales"]);
                                    var totalProjectionPercent = grandTotalProjectionSalesBySectionSales == 0 ? 0 : (totalProjectionSales * 100 / grandTotalProjectionSalesBySectionSales);
                                    var totalActualSales = Convert.ToDecimal(dataRow["GrandTotal_ActualSales"]);
                                    var totalActualPercent = Convert.ToDecimal(dataRow["GrandTotal_ActualPercent"]);
                                    var totalVarianceSales = Convert.ToDecimal(dataRow["GrandTotal_VarianceSales"]);
                                    var totalVariancePercent = Convert.ToDecimal(dataRow["GrandTotal_VariancePercent"]);
                                    newStyle = (totalVarianceSales > 0) ? "color: green" : "color: red";

                                    <div class="grand-total-category-by-row">
                                        <div class="text-center budget-item" style="@formatRow">
                                            <input class="bcs-currency-textbox" category-setting-id="@dataRow["CategorySettingId"]" category-name="@dataRow["CategoryName"]" id="@grandTotalRowProjectionSalesName" value="@string.Format("{0:C}", totalProjectionSales)" re-value="@totalProjectionSales" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowProjectionPercentName" value="@string.Format("{0:#0.00}%", totalProjectionPercent)" re-value="@totalProjectionPercent" readonly="readonly" />
                                        </div>
                                        <div class="text-center budget-item actual-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" id="@grandTotalRowActualSalesName" value="@string.Format("{0:C}", totalActualSales)" re-value="@totalActualSales" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowActualPercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", totalActualPercent)" re-value="@totalActualPercent" readonly="readonly" />
                                        </div>
                                        <div class="text-center budget-item variance-div" style="@formatRow">
                                            <input class="bcs-currency-textbox" id="@grandTotalRowVarianceSalesName" style="@newStyle" value="@string.Format("{0:C}", Math.Abs(totalVarianceSales))" readonly="readonly" />
                                            <input class="bcs-percent-textbox" id="@grandTotalRowVariancePercentName" style="@newStyle" value="@string.Format("{0:#0.00}%", Math.Abs(totalVariancePercent))" readonly="readonly" />
                                        </div>
                                    </div>

                                    index++;
                                }
                            }
                        </div>
                    </div>
                </div>

            </div>

            // write footer scroll
            <div class="col-xs-12 footer-area" style="padding: 0px; display: inline-block">
                <div class="col-xs-2"><span></span></div>
                @* header row*@
                <div class="col-xs-10" style="padding: 0px">
                    <div class="budget-item-container">
                        <div class="budget-item-container" style="height: 1px;@tableWidth">
                        </div>
                    </div>
                </div>
            </div>
        }
        </div>
        <div class="col-xs-12 text-right margin-top-10">
            @Html.Label("CANCEL", new { @id = "act-accept-no", @class = "btn btn-accept-no", @style = "width: 100px" })
            @Html.Label("SAVE", new { @id = "act-accept-yes", @class = "btn btn-primary", @style = "width: 100px" })
        </div>
    }
</div>

<script>
    $(document).ready(function (e) {
        var subCatContainer = $('.edit-budget-by-section .budget-item-container');
        subCatContainer.scroll(function (e) {
            subCatContainer.scrollLeft($(this).scrollLeft());
        });

        // set edit text box for Target item
        if ($('#InputMethod-hidden').val() == $('.edit-budget-by-section #inputMethodDollar').val()) {
            $("[id^='Target_Sales_']").addClass('numerictextbox');
            $("[id^='Target_Sales_']").removeClass('readonly');
            $("[id^='Target_Sales_']").removeAttr('readonly');
        } else {
            $("[id^='Target_Percent_']").addClass('numerictextbox');
            $("[id^='Target_Percent_']").removeClass('readonly');
            $("[id^='Target_Percent_']").removeAttr('readonly');
        }

        // set action focus input text
        $('.edit-budget-by-section .bcs-currency-textbox').unbind('focus');
        $('.edit-budget-by-section .bcs-currency-textbox').on('focus', setFocusOutItem);
        $('.edit-budget-by-section .bcs-percent-textbox').unbind('focus');
        $('.edit-budget-by-section .bcs-percent-textbox').on('focus', setFocusOutItem);

        // reCalculate header width by budget area: if exists scroll bar
        setTimeout(function () {
            if ($('.edit-budget-by-section .budget-area').hasScrollBar()) {
                var currentWidth = $('.edit-budget-by-section .header-area').width();
                $('.edit-budget-by-section .header-area').width(currentWidth - 20);
            }

            // reCalculate width by item actual flag and variance flag
            var actualFlg = $('input[name="ActualNumbersFlg"]').prop('checked');
            var varianceFlg = $('input[name="VarianceFlg"]').prop('checked');
            var widthDefault = 496;
            if (!actualFlg) {
                $('.edit-budget-by-section .actual-div').hide();
                widthDefault -= 165;
            }

            if (!varianceFlg) {
                $('.edit-budget-by-section .variance-div').hide();
                widthDefault -= 165;
            }

            $('.edit-budget-by-section .header-name').width(widthDefault);

            var newWidth = $('.edit-budget-by-section .header-name').length * widthDefault;
            $('.edit-budget-by-section .header-area .budget-item-container:last').width(newWidth);
            $('.edit-budget-by-section .budget-area .budget-item-container:last').width(newWidth);
            $('.edit-budget-by-section .footer-area .budget-item-container:last').width(newWidth);
        });

    });
</script>