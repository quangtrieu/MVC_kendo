@using BCS.Web.Models
@using Kendo.Mvc.UI
@using System.Data;

@model MappingModel

@{
    ViewBag.Title = string.Format("Import Actual Number (Budget Name: {0})", Model.BudgetName);
    Layout = "~/Views/Shared/_LayoutNewBudget.cshtml";
    var version = BCS.Framework.Configuration.Config.GetConfigByKey("webpages:Version");
}

@section Header {
    @Scripts.Render("~/Assets/js/controller/importActualNumber.js" + "?v=" + version)
    @Scripts.Render("~/Assets/js/base/jquery.cookie.js");
}

<style>
    .page-content-wrapper {
        overflow-x: hidden !important;
    }
    .page-header-fixed .page-container {
        margin-top: 30px;
    }
</style>

@Html.HiddenFor(m => m.BudgetId)
@Html.HiddenFor(m => m.FileName)
@Html.HiddenFor(m => m.SheetIndex)
@Html.HiddenFor(m => m.BudgetTabId)
@Html.HiddenFor(m => m.HeaderName)
@Html.HiddenFor(m => m.RedirectPage)

<div class="form-group clearfix dashboard-body" style="margin: 0 auto; -moz-border-radius: 2em">
    <div class="col-xs-12">
        <div class="col-xs-12" style="margin-left: 25%">
            <table>
                <tr>
                    <td>
                        @Html.Label("Select target month or periodic:", new { @style = "font-size: 13pt; color: rgb(15, 18, 21)" })
                    </td>
                    <td>
                        @(Html.Kendo().DropDownList()
                        .Name("SelectTargetMonthsAndPeriodic")
                        .OptionLabel("Select target month or period")
                        .HtmlAttributes(new { style = "width:250px;" })
                        .Events(e =>
                            {
                                e.Change("onChangeTargetMonthsAndPeriodic");
                            })
                        .BindTo(ViewBag.HeaderNameList)
                        .Value(Model.HeaderName)
                        )
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="col-xs-12" style="height: 100%; background-color: #fff; box-shadow: 0px 0px 5px #888888; border-radius: 3px !important;">
        <p>@Html.Label("Row Mapping", new { @style = "font-size: 17pt; color: rgb(85, 150, 207)" })</p>
        <table>
            <tr>
                <td width="200px;" >Actual number column #:</td>
                <td width="200px;">
                    @(Html.Kendo().DropDownList()
                        .Name("firstValue")
                        .OptionLabel("Select column")
                        .Events(e =>
                            {
                                e.Change("onChangeColumn");
                            })
                        .Value(ViewBag.ColumnNameFirst)
                        .BindTo(ViewBag.ActualNumberColumn)
                    )
                </td>
                <td width="150px;">
                    @(Html.Kendo().DropDownList()
                        .Name("Addfunction")
                        .OptionLabel("Select function")
                        .Events(e =>
                            {
                                e.Change("onChangeFunction");
                            })
                        .Value(Model.FuncCalculate)
                        .BindTo(new List<string>() {
                            "MUTIPLE",
                            "DIVIDE",
                            "SUM",
                            "MINUS",
                            "AVG",
                            "MIN",
                            "MAX"
                        })
                        .HtmlAttributes(new { style = "width:100%;" })
                    )
                </td>
                <td width="200px;">
                    @(Html.Kendo().DropDownList()
                        .Name("secondValue")
                        .OptionLabel("Select column")
                        .Events(e =>
                            {
                                e.Change("onChangeColumn");
                            })
                        .BindTo(ViewBag.ActualNumberColumn)
                        .Value(ViewBag.ColumnNameSeconrd)
                        .SelectedIndex(0) 
                    )
                </td>
            </tr>
        </table>
        <p>Actual number row mapping:</p>
        <table>
            <thead>
                <tr>
                    @{
                        if ((!string.IsNullOrEmpty(ViewBag.ValueColumn1) && string.IsNullOrEmpty(ViewBag.ValueColumn2)) || (string.IsNullOrEmpty(ViewBag.ValueColumn1) && !string.IsNullOrEmpty(ViewBag.ValueColumn2)))
                        {
                            <th colspan="4" style="text-align:center;">Excel</th>
                        }
                        else if (!string.IsNullOrEmpty(ViewBag.ValueColumn1) && (!string.IsNullOrEmpty(ViewBag.ValueColumn2)))
                        {
                            <th colspan="5" style="text-align:center;">Excel</th>
                        }
                        else
                        {
                            <th colspan="2" style="text-align:center;">Excel</th>
                        }
                    }
                    <th colspan="2" style="text-align:center;">Budget</th>
                </tr>
                <tr>
                    <th style="width:15px">No</th>
                    <th style="width:180px">Name</th>
                    @{
                        if (!string.IsNullOrEmpty(ViewBag.ValueColumn1))
                        {
                            <th style="width:130px">@string.Format("{0})", ViewBag.Value1)</th>
                        }
                        if (!string.IsNullOrEmpty(ViewBag.ValueColumn2))
                        {
                            <th style="width:130px;">@string.Format("{0})", ViewBag.Value2)</th>
                        }
                        if ((!string.IsNullOrEmpty(ViewBag.ValueColumn1) || (!string.IsNullOrEmpty(ViewBag.ValueColumn2))))
                        {
                            <th style="width:150px;">Merged Value</th>
                        }
                    }
                    <th style="width:180px;">Section</th>
                    <th style="width:180px;">Category</th>
                </tr>
            </thead>
         </table>
        <div style="overflow-x: auto; padding: 0 !important; width: 100%; height:500px;">
            <table id="tbexcel">
                <tbody>
                    @{int rowIndex = 0;}
                    @foreach (DataRow row in Model.DataTableBySheet.Rows)
                    {
                        rowIndex++;
                        var Row = "Row " + rowIndex;
                        var mergedValueName = "mergedValue_" + rowIndex;
                        var itemName = "ColumnName_" + rowIndex;
                        var rowName = row[Model.DataTableBySheet.Columns[0]].ToString();
                        <tr>
                            <td width="15px"><span>@string.Format("{0}", rowIndex)</span></td>
                            <td width="180px"><span name="@Row">@rowName</span></td>
                            @{
                                if (!string.IsNullOrEmpty(ViewBag.ValueColumn1))
                                {
                                    decimal dataItemColumn1 = 0;
                                    decimal.TryParse(row["" + ViewBag.ValueColumn1 + ""].ToString(), out dataItemColumn1);
                                    <td width="130px"><span name="@itemName">@string.Format("{0:C}", dataItemColumn1)</span></td>
                                }
                                if (!string.IsNullOrEmpty(ViewBag.ValueColumn2))
                                {
                                    decimal dataItemColumn2 = 0;
                                    decimal.TryParse(row["" + ViewBag.ValueColumn2 + ""].ToString(), out dataItemColumn2);
                                    <td width="130px"><span name="@itemName">@string.Format("{0:C}", dataItemColumn2)</span></td>
                                }
                                if ((!string.IsNullOrEmpty(ViewBag.ValueColumn1) || (!string.IsNullOrEmpty(ViewBag.ValueColumn2))))
                                {
                                    <td width="150px"><span name="@mergedValueName"></span></td>
                                }
                            }
                            <td width="180px">
                                @(Html.Kendo().DropDownList()
                                    .Name("BudgetSection_" + rowIndex)
                                    .HtmlAttributes(new { style = "width:100%;", index = rowIndex })
                                    .OptionLabel("Select Budget Section")
                                    .DataTextField("CategoryName")
                                    .DataValueField("ParentCategoryId")
                                    .BindTo(ViewBag.BudgetSectionData)
                                )
                            </td>
                            <td width="180px">
                                @(Html.Kendo().DropDownList()
                                    .Name("BudgetCategorySetting" + rowIndex)
                                    .HtmlAttributes(new { style = "width:100%;", index = rowIndex })
                                    .Events(e => e.Change("budgetCategorySettingChange"))
                                    .OptionLabel("Select Budget Category")
                                    .DataTextField("CategoryName")
                                    .DataValueField("CategorySettingId")
                                    .BindTo(ViewBag.CategorySettingDataByBudget)
                                    .CascadeFrom("BudgetSection_" + rowIndex)
                                )
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div style="height: 30px !important"></div>
        <div>
            @Html.Label("Cancel", new { @class = "btn btn-accept-no", @onclick = "CallCanCel();", @style = "margin-right: 30px" })
            @Html.Label("Finish", new { @id = "btnFinish", @onclick = "callFinishImportFile();", @class = "btn btn-primary", @style = "width: 90px" })
        </div>
       <div style="height: 30px !important"> </div>
    </div>
</div>
